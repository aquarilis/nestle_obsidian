<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_nesa_ng_obsidian_obsidian_feature_option</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_nesa_ng_obsidian_obsidian_feature_option">model_configurationVALCHANGES^EQ<item endquery="false" field="model_configuration" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>(DXC) Process Model configuration change</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    try {

        if (!previous.model_configuration.nil()){
            var previousOptionDependency_GR = new GlideRecord("x_nesa_ng_obsidian_m2m_obsidian_option_dependency");
            previousOptionDependency_GR.addQuery("obsidian_feature_option", current.sys_id);
            previousOptionDependency_GR.addQuery("obsidian_model_configuration", previous.model_configuration);
            previousOptionDependency_GR.deleteMultiple();
        }

        if (!current.model_configuration.nil()){

            var conflictingFeatureOption_GR = new GlideRecord(x_nesa_ng_obsidian.DXCObsidianConstants.NML_TABLE_NAMES.FEATURE_OPTION_TABLE);
            conflictingFeatureOption_GR.addQuery("model_feature", current.model_feature);
            conflictingFeatureOption_GR.addQuery("model_configuration", current.model_configuration);
            conflictingFeatureOption_GR.addQuery("sys_id", "!=", current.sys_id);
            conflictingFeatureOption_GR.query();
            while (conflictingFeatureOption_GR.next()){
                conflictingFeatureOption_GR.setValue("model_configuration", "");
                conflictingFeatureOption_GR.update();
                var conflictingFeatureOptionMessage = gs.getMessage("Feature Option '{0}' from the same Model Feature '{1}' has been disconnected from Model Configuration '{2}'");
                conflictingFeatureOptionMessage = conflictingFeatureOptionMessage.replace("{0}", conflictingFeatureOption_GR.name);
                conflictingFeatureOptionMessage = conflictingFeatureOptionMessage.replace("{1}", current.model_feature.name);
                conflictingFeatureOptionMessage = conflictingFeatureOptionMessage.replace("{2}", current.model_configuration.name);

                gs.addInfoMessage(conflictingFeatureOptionMessage);
            }
       
            var currentOptionDependency_GR = new GlideRecord("x_nesa_ng_obsidian_m2m_obsidian_option_dependency");
            currentOptionDependency_GR.addQuery("obsidian_feature_option", current.sys_id);
            currentOptionDependency_GR.addQuery("obsidian_model_configuration", current.model_configuration);
            currentOptionDependency_GR.query();
            if (currentOptionDependency_GR.hasNext() === false){
                currentOptionDependency_GR.initialize();
                currentOptionDependency_GR.setValue("obsidian_feature_option", current.sys_id);
                currentOptionDependency_GR.setValue("obsidian_model_configuration", current.model_configuration);
                currentOptionDependency_GR.insert();
            }

        
        }



    } catch (exception) {
        var dxcLogger = new global.DXCGSLog("com.dxc.global.debugging_level", "(DXC) Process Model configuration change");
        dxcLogger.logError(exception);
    }
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin_Luu-Ly_Mai</sys_created_by>
        <sys_created_on>2022-03-31 09:19:34</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>2a2910061be68950fe9e43f1b24bcba0</sys_id>
        <sys_mod_count>14</sys_mod_count>
        <sys_name>(DXC) Process Model configuration change</sys_name>
        <sys_overrides/>
        <sys_package display_value="NexGen Obsidian Management" source="x_nesa_ng_obsidian">20ae71f61b8dc11006e886efe54bcbc5</sys_package>
        <sys_policy/>
        <sys_scope display_value="NexGen Obsidian Management">20ae71f61b8dc11006e886efe54bcbc5</sys_scope>
        <sys_update_name>sys_script_2a2910061be68950fe9e43f1b24bcba0</sys_update_name>
        <sys_updated_by>admin_luu-ly_mai</sys_updated_by>
        <sys_updated_on>2022-05-03 09:48:35</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=2a2910061be68950fe9e43f1b24bcba0"/>
</record_update>
