<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>standard</category>
        <client_script><![CDATA[function ($scope, $location, spUtil, amb, $http, spAriaUtil, $timeout, spNavStateManager, spModal, $window, $rootScope, $interval, spAriaFocusManager) {
	var c = this;


	//  }
	/*
	 * options:
	 * hide_footer (bool) = true to remove the data table footer contents
	 * hide_header (bool) = true to remove the data table header contents
	 * show_new (bool) = true to show the "New" record button
	 * show_keywords (bool) = true to show the keyword search field
	 * table (string) = the table name to query
	 * filter (string) = the encoded query
	 * o (string) = the order by column
	 * d (string) = The order by direction: asc or desc
	 * p (int) = the page to jump to
	 * fields (string) = comma seperated list of fields that become the list columns
	 * view (string) = the default view to load for columns, overrides fields
	 */


	// display cancel surveys column for "My Surveys" tab

	c.displayCancelSurveys = function () {
		var result = false;
		if (c.data.table === 'asmt_assessment_instance') {
			var filter = c.data.filter;
			var arr = c.data.filter_by_options;
			for (var i in arr) {
				if (arr[i][1] === filter && arr[i][2] === 'true')
					return true;
			}
		}
		return result;

	}


	// display order icon only it has the catalog link

	c.checkDisplayOrderIcon = function (table, catalog_link) {
		var result = false;
		if ((table === 'incident' || table === 'sc_req_item') && catalog_link !== undefined)
			result = true;
		return result;
	}


	c.orderNow = function (catalog_link) {
		$window.open("?id=sc_cat_item&sys_id=" + catalog_link);
	}

	c.cancelSurvey = function (id) {
		$scope.server.get({
			method: "cancelSurvey",
			survey_sys_id: id
		}).then(function (response) {
			//Process your response
			spUtil.update($scope);
			$rootScope.$broadcast('$sp.updateHeaderCount', true);
		});
	}

	$scope.exportTypes = [{
		label: 'PDF',
		value: 'PDF'
	}, {
		label: 'Excel',
		value: 'EXCEL'
	}, {
		label: 'CSV',
		value: 'CSV'
	}];
	var keys = ['table', 'filter', 'p', 'o', 'd'];

	var eventNames = {
		click: 'data_table.click',
		setFilter: 'data_table.setFilter',
		setDateFilter: 'data_table.setDateFilter',
		setKeywords: 'data_table.setKeywords',
		setCompanyFilter: 'data_table.setCompnayFilter'
	};



	$scope.go = function (table, item) {
		var parm = {};
		parm.id = 'standard_ticket';
		parm.table = table;
		parm.sys_id = item.sys_id;
		parm.view = 'sp';
		
		if (table === "sysapproval_approver") {
			parm.id = 'nestle_approval';
			parm.sys_id = item.sys_id;
		}

		else if (table === "sn_uni_task_universal_task") { // STSK0020103
			parm.table = item.parentTable;
			parm.sys_id = item.parentId;
		}

		// STSK0020113 - item.parentId is only valid if the x_nesa_ng_obsidian_obsidian_model record has a obsidian_new_model_launch reference
		else if (table === "x_nesa_ng_obsidian_obsidian_model" &&  item.parentId) {
			parm.table = 'x_nesa_ng_obsidian_obsidian_new_model_launch';
			parm.sys_id = item.parentId;
		} 
		else if (table === "x_nesa_ng_obsidian_obsidian_spare_part") 
			parm.id = 'form';


		var newURL = $location.search(parm);
		spAriaFocusManager.navigateToLink(newURL.url());


	};
	$scope.goTo = function (page, table, id) {

		var parms = {
			id: page,
			table: table,
			sys_id: id
		};
		$location.search(parms);
	};


	$scope.newRecord = function () {
		var parms = {
			id: 'form',
			table: $scope.data.table,
			view: $scope.data.view,
			sys_id: '-1'
		};
		if ($scope.data.filter != '')
			parms.query = $scope.data.filter;

		$location.search(parms);
	};

	function recoverStateFromUrl() {
		$scope.data.fields = [];
		var s = $location.search();
		for (var x in keys) {
			if (s[keys[x]]) {
				$scope.data[keys[x]] = s[keys[x]];
			}
		}
		$scope.server.update().then(function (data) {
			if (s.sys_id) {
				for (var x in data.list) {
					if (data.list[x].sys_id === s.sys_id) {
						$scope.go(s.table, data.list[x]);
					}
				}
			}
		});
	}

	if ($scope.options.fromUrl) {
		var origSearch = $location.search();
		$scope.$on('$locationChangeSuccess', function (e) {
			var s = $location.search();
			if (origSearch.id !== s.id)
				return;

			if ($scope.ignoreLocationChange) {
				$scope.ignoreLocationChange = false;
				return;
			}

			// Helps to recover state when using the browser's back button
			recoverStateFromUrl();
		});
	}


	$scope.getNumber = function (num) {
		return new Array(num);
	}

	$scope.mathMin = function (v1, v2) {
		return Math.min(v1, v2);
	}

	function getData(updateUrl) {

		var f = $scope.data;
		spUtil.update($scope).then(function (data) {
			f.view = data.view;
			if ($scope.options.fromUrl && updateUrl)
				setPermalink(f.table, f.filter, f.o, f.d, f.p);

			if ($scope.options.show_breadcrumbs && data.filterBreadcrumbs)
				$scope.$broadcast('widget-filter-breadcrumbs.setBreadcrumbs', data.filterBreadcrumbs.data, data.filter);

			initRecordWatcher(f.table, f.filter);
		});
	}

	function setPermalink(table, filter, orderBy, orderDirection, page) {
		$scope.ignoreLocationChange = true;
		var search = $location.search();
		angular.extend(search, {
			spa: 1,
			table: table,
			filter: filter,
			p: page,
			o: orderBy,
			d: orderDirection
		});
		$location.search(search);
	}

	var watcher;

	function initRecordWatcher(table, filter) {

		if (watcher)
			watcher.unsubscribe();

		if (table && filter) {
			var watcherChannel = amb.getChannelRW(table, filter);
			amb.connect();
			watcher = watcherChannel.subscribe(function (message) {
				if (!message.data)
					return;
				switch (message.data.action) {
					case "change":
						updateRowFromRW(message);
						break;
						// A record was removed
					case "enter":
						// A record was added
					default:
						spUtil.update($scope);
						break;
				}
			});
		}
	}

	function updateRowFromRW(message) {
		if (message.data && message.data.sys_id && $scope.data.list) {
			var row, field;
			for (var i = 0; i < $scope.data.list.length; i++) {
				row = $scope.data.list[i];
				if (row.sys_id === message.data.sys_id) {
					var fields = Object.getOwnPropertyNames(message.data.record);
					for (var f in fields) {
						field = fields[f];
						if (typeof row[field] !== 'undefined') {
							row[field].display_value = message.data.record[field].display_value;
						}
					}
				}
			}
		}
	}

	$scope.$on('$destroy', function () {
		if (watcher)
			watcher.unsubscribe();
	});

	$scope.setPageNum = function (num) {
		$scope.data.p = num;
		getData(true);
		$timeout(function () {
			$scope.focusOnTableHeader();
		});
	}

	$scope.setOrderBy = function (field) {
		// not able to order by state
// 		if (field === "state") {
// 			return;
// 		}
		var d = "asc";
		if ($scope.data.o === field) {
			if ($scope.data.d === "asc")
				d = "desc";
			else
				d = "asc";
		}

		if (d === "asc") {
			spAriaUtil.sendLiveMessage($scope.data.msg.sortingByAsc);
		} else if (d === "desc") {
			spAriaUtil.sendLiveMessage($scope.data.msg.sortingByDesc);
		}

		$scope.data.o = field;
		$scope.data.d = d;

		//order by date taking surveys into account
		if (field === 'sys_updated_on')
			$scope.sortByDate();
		else
			$scope.setSearch(true);

	};

	$scope.setSearch = function (updateUrl) {
		$scope.data.p = 1;
		getData(updateUrl);
	};

	$scope.$on(eventNames.setFilter, function (e, newFilter) {
		$scope.data.filter = newFilter;
		$scope.setSearch(false);
	});

	//DXC SCU set the the dinamically the date range to do the search for invoices and purchase orders
	$scope.$on(eventNames.setDateFilter, function (e, newFilter) {
		if ($scope.options.id === 'my_invoices' || $scope.options.id === 'my_closed_invoices' || $scope.options.id === "my_rejected_invoices")
			$scope.data.filter = $scope.data.filter.split('u_invoice_date')[0] + newFilter;
		if ($scope.options.id === "my_po" || $scope.options.id === "my_complete_po")
			$scope.data.filter = $scope.data.filter.split('u_po_creation_date')[0] + newFilter;
		$scope.setSearch(false);
	});
	//DXC SCU set the dinamically the compnay code to do the search for invoices and purchase orders
	$scope.$on(eventNames.setCompanyFilter, function (e, newFilter) {

		if ($scope.options.id === 'my_invoices' || $scope.options.id === 'my_closed_invoices' || $scope.options.id === "my_rejected_invoices") {

			var subqueries = $scope.data.filter.split(/\^u_company_code(.*?)\^/);

			if (subqueries.length > 2) {

				$scope.data.filter = subqueries[0] + newFilter + '^' + subqueries[2];

			} else if (subqueries.length > 1) {

				$scope.data.filter = subqueries[0] + newFilter + subqueries[2];

			}
		}

		if ($scope.options.id === "my_po" || $scope.options.id === "my_complete_po") {

			var subqueriespo = $scope.data.filter.split(/\^u_nestle_company_code./);

			if (subqueriespo.length > 2) {

				$scope.data.filter = subqueriespo[0] + newFilter + '^' + subqueriespo[2];

			} else if (subqueriespo.length > 1) {

				$scope.data.filter = subqueriespo[0] + newFilter; //+subqueriespo[2];

			} else if (subqueriespo.length == 1) {

				$scope.data.filter = subqueriespo[0] + newFilter + '^';
			}
		}
		$scope.setSearch(false);
	});

	$scope.$on(eventNames.setKeywords, function (e, keywords) {
		$scope.data.keywords = keywords;
		$scope.setSearch(false);
	});

	$scope.$on('widget-filter-breadcrumbs.queryModified', function (e, newFilter) {
		$scope.data.filter = newFilter;
		$scope.setSearch(true);
	});

	$scope.rowsWerePruned = function () {
		if (!$scope.data.list)
			return;

		$scope.rowsPruned = $scope.mathMin($scope.data.window_end, $scope.data.row_count) - $scope.data.window_start - $scope.data.list.length;
		return $scope.rowsPruned > 0;
	}

	$scope.showFilter = function () {
		return !$scope.data.list.length && !$scope.data.num_pages && !$scope.data.invalid_table && !$scope.loadingData;
	}

	c.appendQuery = function (query) {
		if ($scope.data.filter.length > 1)
			$scope.data.filter += '^';
		$scope.data.filter += query;
		$scope.setSearch();

	}

	// Makes Widget Async
	$scope.data = $scope.options;
	$scope.loadingData = true;
	$scope.server.update().then(function () {
		if ($scope.data.newButtonUnsupported)
			console.warn("Service Portal: New button not supported for sys_attachment list");
		$scope.loadingData = false;
		initRecordWatcher($scope.data.table, $scope.data.filter);
	});
	$scope.sortByDate = function () {
		$scope.data.list = [];
		$scope.data.totElements.sort(function (a, b) {
			if ($scope.data.d === "desc")
				return new Date(b.sys_updated_on.value).getTime() - new Date(a.sys_updated_on.value).getTime();
			else
				return new Date(a.sys_updated_on.value).getTime() - new Date(b.sys_updated_on.value).getTime();
		});
		for (var j = $scope.data.page_index * $scope.data.window_size; j < $scope.data.page_index * $scope.data.window_size + $scope.data.window_size; j++) {
			if ($scope.data.totElements[j])
				$scope.data.list.push($scope.data.totElements[j]);
		}
	};

	function parseQuery(table, queryString) {
		return $http.post('/api/now/sp/parsequery/' + table, queryString).then(function (response) {
			return response.data.result;
		});
	}

	c.createQueryTerm = function (table, field, sys_id, operator) {
		var temp = field;
		if (field === 'document_id.short_description' || field === 'document_id.sys_class_name' || field === 'document_id.number') {
			field = temp.replace("document_id.", "sysapproval.");
		}

		return $http.get('/api/now/sp/getInOutQueryTerm', {
			params: {
				table: table,
				sys_id: sys_id,
				field: field,
				operator: operator
			}
		}).then(function (response) {
			if (response && response.data && response.data.result)
				return response.data.result.parts;
		});
	}

	c.showMatching = function (field, newTerm) {
		var queryString = $scope.data.filter;
		var eq = "";
		parseQuery($scope.data.table, queryString).then(function (oldTerms) {
			for (var i = 0; i < oldTerms.length; i++) {
				var term = oldTerms[i];
				if (isSameField(newTerm, term))
					continue;

				if (eq.length)
					eq += '^';

				eq += getEncodedTerm(term);
			}
			if (eq.length)
				eq += '^';
			eq += getEncodedTerm(newTerm);
			$scope.data.filter = eq;
			$scope.setSearch();
		});
	};

	c.filterOut = function (field, newTerm) {
		var eq = $scope.data.filter;
		if (eq.length)
			eq += '^';

		eq += getEncodedTerm(newTerm);
		$scope.data.filter = eq;
		$scope.setSearch();
	};

	function isSameField(t1, t2) {
		if (t1 && t2) {
			if ('left' in t1 && 'left' in t2)
				return t1.left.query_term_field === t2.left.query_term_field;
			else if ('left' in t1)
				return t1.left.query_term_field === t2.query_term_field;
			else if ('left' in t2)
				return t1.query_term_field === t2.left.query_term_field;
			return t1.query_term_field === t2.query_term_field;
		}
	}

	function getEncodedTerm(term) {
		var eq;
		if (term) {
			if (term.left) {
				eq = getEncodedTerm(term.left);
				eq += '^OR';
				eq += getEncodedTerm(term.right);
			} else {
				eq = term.query_term_field;
				eq += term.operator;
				eq += term.value;
			}
		}
		return eq;
	}

	// 	$scope.$on('data_table.click', function (e, parms) {
	// 		//If query at task level, redirect to child table
	// 		if (parms.table === "task") {


	// 			parms.table = parms.record.sys_class_name.value;



	// 		}

	// 		var p = $scope.data.page_id || 'standard_ticket';
	// 		var s = {
	// 			id: p,
	// 			table: parms.table,
	// 			sys_id: parms.sys_id,
	// 			view: 'sp'
	// 		};
	// 		// 		var newURL = $location.search(s);
	// 		//spAriaFocusManager.navigateToLink(newURL.url());
	// 	});


	c.uiAction = function (action, sys_id) {
		c.data.action = action;
		c.data.sys_id = sys_id;
		c.server.update().then(function () {
			c.data.action = undefined;
			spUtil.addInfoMessage(c.data.buttonMessage);
			$location.href = "?id=" + c.data.page_to_reload;
		});
	};

	//Custom function that opens the chat window widget ina dialog (the queue or queues are obtained from server by the own widget)
	c.openChatModal = function (item) {
		//creates the conversation in server side
		c.data.action = 'create_chat_for_a_task';
		c.data.item = item;
		c.server.update().then(function () {
			//then
			var chatWidgetOptions = {
				"channelID": c.data.channelID,
				'queueID': c.data.queueID
			};
			spModal.open({
				widget: c.data.chatWindowWidget.id,
				//widgetInput: chatWidgetOptions,
				buttons: [],
				shared: chatWidgetOptions
			}).then(function (childScope) {});
		});
	};

	//refresh data
	//     var x = 0;
	//     var intervalID = setInterval(function() {
	//         getData(true);
	//         //$scope.server.update();
	//         if (++x === 4) {
	//             window.clearInterval(intervalID);
	//         }
	//     }, 1000);


}]]></client_script>
        <controller_as>c</controller_as>
        <css>/* Icon when the collapsible content is shown */&#13;
  .collapse_img:after {&#13;
    font-family: "Glyphicons Halflings";&#13;
    content: "\e114";&#13;
  }&#13;
  /* Icon when the collapsible content is hidden */&#13;
  .collapse_img.collapsed:after {&#13;
    content: "\e113";&#13;
  }&#13;
&#13;
.collapse_img {&#13;
    color: #475064;&#13;
}&#13;
&#13;
.panel-heading {&#13;
  padding-left: 8px;&#13;
}&#13;
&#13;
thead {&#13;
  border-bottom: 1px solid #ddd;&#13;
}&#13;
&#13;
table {&#13;
  margin-bottom: 0;&#13;
}&#13;
&#13;
.table &gt; thead &gt; tr &gt; th {&#13;
  border: 1px solid #ddd;&#13;
  cursor: pointer;&#13;
  vertical-align: middle;&#13;
&#13;
  &amp;:nth-child(2) {&#13;
    border-left: none;&#13;
  }&#13;
&#13;
&#13;
&#13;
  &amp;:last-child {&#13;
    border-right: none;&#13;
  }&#13;
}&#13;
&#13;
th i {&#13;
  display: inline-block;&#13;
  margin-left: 5px;&#13;
  color: #A0A0A0;&#13;
}&#13;
&#13;
th .disabled{&#13;
  color:#ddd;&#13;
}&#13;
&#13;
.th-title {&#13;
  display: inline-block;&#13;
  color: #8A95B1;&#13;
  font-weight: bold;&#13;
}&#13;
&#13;
.panel-body {&#13;
  overflow: auto;&#13;
  padding: 0px;&#13;
}&#13;
&#13;
&#13;
.selected {&#13;
  color: #fff;&#13;
  background-color: #909090;&#13;
  border-color: 1px solid #fff;&#13;
}&#13;
&#13;
tbody tr:last-child {&#13;
  border-bottom: none;&#13;
}&#13;
&#13;
.pruned-msg {&#13;
  padding-bottom: 10px;&#13;
  padding-left: 4px;&#13;
  text-align: center;&#13;
}&#13;
&#13;
.pruned-msg-filter-pad {&#13;
  padding-top:8px;&#13;
}&#13;
&#13;
.filter-breadcrumbs {&#13;
  border-bottom: 1px solid #ddd;&#13;
  padding-top: 3px;&#13;
}&#13;
&#13;
.dropdown-toggle {&#13;
  background: none;&#13;
  padding: 0 0 4px 0;&#13;
}&#13;
&#13;
.sp-list-cell {&#13;
  white-space: pre-wrap;&#13;
  color: #475064;&#13;
}&#13;
&#13;
.dropdown {&#13;
  .glyphicon-menu-hamburger:focus {&#13;
 		outline: thin dotted;&#13;
		outline: 5px auto -webkit-focus-ring-color;&#13;
		outline-offset: -2px; &#13;
	}&#13;
}&#13;
&#13;
.fa-comment-alt-dots {&#13;
    color: #00B2A9;&#13;
    padding-left: 40%;&#13;
    font-size: 18px;&#13;
}</css>
        <data_table>sp_instance_table</data_table>
        <demo_data>{"data":
	{
		"table": "incident",
		"view": "default",
		"o": "opened_at",
		"d": "desc",
		"filter": "activeEQtrue",
		"p": 1,
		"fields": "number,short_description"
	}
}</demo_data>
        <description/>
        <docs/>
        <field_list>table,filter,field_list,maximum_entries,order,order_by,order_direction,title,color,glyph,sp_page</field_list>
        <has_preview>false</has_preview>
        <id>dxc-obsidian-data-table</id>
        <internal>false</internal>
        <link><![CDATA[function(scope, element, attrs, ctrl) {
    var $ul, $contextMenu;

    scope.focusOnTableHeader = function() {
        element.find(".data-table-title").attr("tabindex", "-1").focus();
    }

    element.on('contextmenu', function(e) {
        if (e.ctrlKey)
            return; // ctrlKey is for the debug menu, not this menu

        var rowScope = angular.element(e.target).scope();
        var field, item, fieldVal;

        // Context Menu for tbody
        if (angular.isDefined(rowScope.field) && angular.isDefined(rowScope.item)) {
            e.preventDefault();
            field = rowScope.field;
            item = rowScope.item;
            fieldVal = item[field].value;

            var items = [
                ['${Show Matching}', function() {
                    ctrl.createQueryTerm(scope.data.table, field, item.sys_id, '=').then(function(term) {
                        ctrl.showMatching(field, term);
                    });
                }],
                ['${Filter Out}', function() {
                    ctrl.createQueryTerm(scope.data.table, field, item.sys_id, '!=').then(function(term) {
                        ctrl.filterOut(field, term);
                    });
                }]
            ];

            renderContextMenu(items);
            setContextMenuPosition(e);
        }
    });

    function renderContextMenu(items) {
        var scrollHeight = $('body').get(0).scrollHeight;
        $contextMenu = angular.element('<div>', {
            'class': 'dropdown clearfix context-dropdown open'
        });

        $contextMenu.on('click', function(e) {
            if ($(e.target).hasClass('dropdown')) {
                _clearContextMenus(event);
            }
        });
        $contextMenu.on('contextmenu', function(event) {
            event.preventDefault();
            _clearContextMenus(event);
        });

        $contextMenu.css({
            position: 'absolute',
            top: 0,
            height: scrollHeight,
            left: 0,
            right: 0,
            zIndex: 9999
        });

        $('body').append($contextMenu);

        $ul = angular.element('<ul>', {
            'class': 'dropdown-menu',
            'role': 'menu'
        });
        renderItems();
        $contextMenu.append($ul);

        function renderItems() {
            angular.forEach(items, function(item) {
                var $li = angular.element('<li>');

                if (item === null) {
                    $li.addClass('divider');
                } else {
                    var $a = angular.element('<a>');
                    $a.attr({
                        tabindex: '-1',
                        href: '#'
                    });
                    $a.text(item[0]);
                    $li.append($a);
                    $li.on('click', function(e) {
                        e.preventDefault();
                        scope.$apply(function() {
                            _clearContextMenus(e);
                            item[1].call(item, item);
                        });
                    });
                }

                $ul.append($li);
            });
        }
    }

    function _clearContextMenus(event) {
        if (!event) {
            return;
        }

        angular.element(event.currentTarget).removeClass('context');

        var els = angular.element(".context-dropdown");
        angular.forEach(els, function(el) {
            angular.element(el).remove();
        });
    }

    var contextMenuItemHeight = 0;

    function setContextMenuPosition(event) {
        if (contextMenuItemHeight === 0)
            contextMenuItemHeight = $ul.children(0).height();

        // Why not just call .width() and .height() on the container? Because those calculations cause browsers to reflow
        // that can cause IE10 to take 200ms to render a context menu.
        var cmWidth = 150;
        var cmHeight = contextMenuItemHeight * $ul.children().length;
        var startX = event.pageX + cmWidth >= window.innerWidth ? event.pageX - cmWidth : event.pageX;
        var startY = event.pageY + cmHeight >= window.innerHeight ? event.pageY - cmHeight : event.pageY;

        $ul.css({
            display: 'block',
            position: 'absolute',
            left: startX,
            top: startY,
            'min-width': cmWidth
        });
    }
}]]></link>
        <name>DXC Obsidian Data Table</name>
        <option_schema>[{"hint":"If enabled, show the list filter in the breadcrumbs of the data table","name":"enable_filter","default_value":"false","section":"Behavior","label":"Enable Filter","type":"boolean"},{"name":"valid_months","section":"other","label":"Valid months","type":"integer"},{"name":"message","section":"other","label":"Message","type":"string"},{"name":"show_chat","section":"other","default_value":"true","label":"Show open chat option","type":"boolean"},{"name":"limit","section":"other","default_value":"","label":"Limit","type":"integer"},{"hint":"Shows the list collapsed","name":"collapsed","section":"Behavior","default_value":"true","label":"Collapsed","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles>snc_external,snc_internal</roles>
        <script><![CDATA[(function () {
	if (!input) // asynch load list
		return;

	if (input) {
		// Cancel a survey
		if (input.method === "cancelSurvey") {
			var record = new GlideRecord('asmt_assessment_instance');
			record.addQuery("sys_id", input.survey_sys_id);
			record.query();
			while (record.next()) {
				record.state = 'canceled';
				record.update();
			}
		}

	}

	data.msg = {};
	data.msg.sortingByAsc = gs.getMessage("Sorting by ascending");
	data.msg.requestAgain = gs.getMessage("Request Again");
	data.msg.sortingByDesc = gs.getMessage("Sorting by descending");
	data.allItemspage = options.allItems_page || 'all_my_items';

	/*
	 * data.table = the table
	 * data.p = the current page starting at 1
	 * data.o = the order by column
	 * data.d = the order by direction
	 * data.keywords = the keyword search term
	 * data.list = the table data as an array
	 * data.invalid_table = true if table is invalid or if data was not succesfully fetched
	 * data.table_label = the table's display name. e.g. Incident
	 * data.table_plural = the table's plural display name. e.g. Incidents
	 * data.fields = a comma delimited list of field names to show in the data table
	 * data.column_labels = a map of field name -> display name
	 * data.window_size = the number of rows to show
	 * data.filter = the encoded query
	 */

	optCopy(['table', 'p', 'o', 'd', 'filter', 'filterACLs', 'fields', 'keywords', 'view', 'filter_by_options']);
	optCopy(['relationship_id', 'apply_to', 'apply_to_sys_id', 'window_size']);
	data.list = [];

	// Get fields from widget'parameters, if no fields are defined then especified view or default view fields will be taken
	if (options.field_list)
		data.fields = options.field_list;
	if (!data.fields) {
		if (data.view)
			data.fields = $sp.getListColumns(data.table, data.view);
		else
			data.fields = $sp.getListColumns(data.table);
	}

	//Data.table
	if (!data.table) {
		data.invalid_table = true;
		data.table_label = "";
		return;
	}

	data.view = data.view || 'mobile';
	data.table = data.table || $sp.getValue('table');
	data.filter = data.filter || $sp.getValue('filter');
	data.filter_by_options = data.filter_by_options || $sp.getValue('filter_by_options');
	data.keywords = data.keywords || $sp.getValue('keywords');
	data.p = data.p || $sp.getValue('p') || 1;
	data.p = parseInt(data.p);
	data.o = data.o || $sp.getValue('o') || $sp.getValue('order_by');
	data.d = data.d || $sp.getValue('d') || $sp.getValue('order_direction');
	data.page_index = data.p - 1;
	data.show_new = data.show_new || options.show_new;
	// Show live chat button and collapased content, by default not shown
	data.show_chat = false;
	data.show_collapsed_content = true;
	//data.show_collapsed_content = options.collapsed == "false";

	var windowSize = data.window_size || $sp.getValue('maximum_entries') || 10;
	windowSize = parseInt(windowSize);
	if (isNaN(windowSize) || windowSize < 1)
		windowSize = 10;
	data.window_size = windowSize;
	data.page_to_reload = $sp.getParameter('id');


	//option to approve or reject an approval from the list (option removed in one of the previous sprints)
	if (input && input.action && input.sys_id) {
		var action = input.action;
		var recordGR = new GlideRecord(data.table);
		recordGR.addQuery('sys_id', input.sys_id);
		recordGR.query();

		if (recordGR.next()) {
			// Approve
			if (action === 'approve') {
				data.buttonMessage = gs.getMessage("Approved");
				recordGR.setValue('state', 'approved');
				recordGR.update();
			}
			// Reject
			if (action === 'reject') {
				data.buttonMessage = gs.getMessage("Rejected");
				recordGR.setValue('state', 'rejected');
				recordGR.update();
			}
		}
	}

	data.window_start = data.page_index * data.window_size;
	data.window_end = (data.page_index + 1) * data.window_size;

	var gr;
	gr = new GlideRecordSecure(data.table);
	if (!gr.isValid()) {
		data.invalid_table = true;
		data.table_label = data.table;
		return;
	}

	data.canCreate = gr.canCreate();
	data.newButtonUnsupported = data.table === "sys_attachment";
	data.table_label = gr.getLabel();
	data.table_plural = gr.getPlural();
	if (data.filter) {
		if (data.filterACLs)
			gr = $sp.addQueryString(gr, data.filter);
		else
			gr.addEncodedQuery(data.filter);
	}

	if (data.keywords) {
		gr.addQuery('123TEXTQUERY321', data.keywords);
		data.keywords = null;
	}

	data.filter = gr.getEncodedQuery();

	if (data.relationship_id) {
		var rel = GlideRelationship.get(data.relationship_id);
		var target = new GlideRecord(data.table);
		var applyTo = new GlideRecord(data.apply_to);
		applyTo.get("sys_id", data.apply_to_sys_id);
		rel.queryWith(applyTo, target); // put the relationship query into target
		gr.addEncodedQuery(target.getEncodedQuery()); // get the query the relationship made for us
	}
	
	if (data.o) {
		if (data.d === "asc")
			gr.orderBy(data.o);
		else
			gr.orderByDesc(data.o);
	}

	//This line was uncommented on 77.05.2020 as part of CPR improvements. uncommenting this line the perfformance when changing the page is a bit better (but produces an issue with Surveys and pagination)
	////Uncoment this line to remove surveys from widget
// 	gr.chooseWindow(data.window_start, data.window_end);
	gr._query();

	//Adding surveys to Table STSK0013457
// 	var readySurveyCount = 0;
// 	var closedSurveyCount = 0;
// 	//Ready to take surveys
// 	if (options.id && (options.id === "my_items" || options.id === "all_my_items")) {
// 		var sp = new sn_portal_surveys.SPSurveyAPI();
// 		data.maxRecords = options.limit || 100;
// 		sp.getSurveys(data.maxRecords, true, data);
// 		data.instances = data.instances.filter(function (element) {
// 			if (element.trigger_table != 'sn_hr_core_case') return true;
// 			else return false;
// 		});
// 		data.instances.forEach(function (instance) {
// 			if (instance.description)
// 				instance.description = $sp.stripHTML(instance.description);
// 		});
// 		readySurveyCount = data.instances.length;
// 	} else if (options.id && (options.id === "closed_items" || options.id === "closed_items")) {
// 		//Completed surveys
// 		var grCompletedSurveys = new GlideRecord('asmt_assessment_instance');
// 		//avoid HR surveys & product catalog rating surveys
// 		grCompletedSurveys.addEncodedQuery('metric_type.evaluation_method=survey^state=complete^user=' + gs.getUserID() + '^trigger_table!=sn_hr_core_case^metric_type!=19bdfc90dbd91c10eb8d81cc0b961951');
// 		if (options.limit)
// 			grCompletedSurveys.setLimit(options.limit);
// 		grCompletedSurveys.query();
// 		closedSurveyCount = grCompletedSurveys.getRowCount();
// 	}

	data.column_labels = {};
	data.css_class = {};
	data.fields_array = data.fields.split(',');
	// use GlideRecord to get field labels vs. GlideRecordSecure
	var grForLabels = new GlideRecord(data.table);
	for (var i in data.fields_array) {
		var field = data.fields_array[i];
		var ge = grForLabels.getElement(field);
		if (ge === null)
			continue;

		if(data.table !== "sysapproval_approver") 
			data.column_labels[field] = ge.getLabel();

		data.css_class[field] = "";
	}

	data.column_labels["short_description"] = gs.getMessage("Reason");
	data.column_labels["number"] = gs.getMessage("_ID");
	data.column_labels["sys_class_name"] = gs.getMessage("Item");
	data.column_labels["sys_updated_on"] = gs.getMessage("Date");
	//data.column_labels["state"] = gs.getMessage("Status");
	data.column_labels["document_id.short_description"] = gs.getMessage("Reason");
	data.column_labels["document_id.number"] = gs.getMessage("Ticket ID");
	data.column_labels["document_id.sys_class_name"] = gs.getMessage("Item");
	data.column_labels["sys_updated_on"] = gs.getMessage("Date");
	data.column_labels["metric_type"] = gs.getMessage("Reason");
	data.column_labels["metric_type.evaluation_method"] = gs.getMessage("Item");
	if (data.table === "asmt_assessment_instance") {
		data.column_labels["sys_updated_on"] = gs.getMessage("Last status update");
	}
	//definis deferent labels and behaviours for the diferentes instances
	// Modify column labels as per STRY0025408
	if (options.id && (options.id === "my_items" || options.id === "all_my_items" || options.id === "closed_items" || options.id === "all_closed_items")) {
		data.column_labels["short_description"] = gs.getMessage("Reason");
		data.column_labels["number"] = gs.getMessage("_ID");
		data.column_labels["sys_class_name"] = gs.getMessage("Item");
		data.css_class["sys_class_name"] = "hidden-xs";
		data.column_labels["sys_updated_on"] = gs.getMessage("Date");
		//data.column_labels["state"] = gs.getMessage("Status");
		data.css_class["state"] = "hidden-xs";
		data.page_id = "item";
		//Add translation for panel title
		data.title = gs.getMessage(options.title);
	} else if (options.id && (options.id === "my_approvals" || options.id === "closed_approvals")) {
		data.column_labels["document_id.short_description"] = gs.getMessage("Reason");
		data.column_labels["document_id.number"] = gs.getMessage("Ticket ID");
		data.column_labels["document_id.sys_class_name"] = gs.getMessage("Item");
		data.css_class["document_id.sys_class_name"] = "hidden-xs";
		data.column_labels["sys_updated_on"] = gs.getMessage("Date");
		data.column_labels["state"] = gs.getMessage("Status");
		data.page_id = "nestle_approval";
		//Add translation for panel title
		data.title = gs.getMessage(options.title);
	}
	//change here the heder labels and css class
	else if (options.id && (options.id === "my_open_cases" || options.id === "my_completed_cases")) {
		//page to redirect
		data.page_id = "dxc_hrj_ticket_page";
		//Add translation for panel title
		data.title = gs.getMessage(options.title);
	}

	if (options.id && (options.id === "my_items" || options.id === "all_my_items")) {
		var userGR = new GlideRecord("sys_user");
		var location_sys_id = "";
		var company_sys_id = "";
		var market_sys_id = "";
		userGR.addQuery("sys_id", gs.getUserID());
		userGR.query();
		if (userGR.next()) {
			location_sys_id = userGR.location;
			company_sys_id = userGR.company;
			market_sys_id = userGR.u_market;
		}

	}

	//show colapsed content for the following instances
	if (options.id && (options.id === "my_items" || options.id === "all_my_items" || options.id === "my_approvals" || options.id === "my_invoices" || options.id === "my_inquiries" || options.id === "my_closed_invoices" || options.id === "my_rejected_invoices" || options.id === "my_po" || options.id === "my_complete_po" || options.id === "po_line_item")) {
		data.show_collapsed_content = true;
	}

	// Show Approval' actions button, by default not shown (decide not to show the button in a previous sprint)
	data.show_approval_action = false;
	if (options.id && options.id === "my_approvals") {
		data.show_approval_action = true;
	}

	cs = [];
	data.totElements = [];
	//Creating the rows
	while (gr._next()) {
		var record = {};
		$sp.getRecordElements(record, gr, data.fields);
		record.sys_id = gr.getValue('sys_id');

		var parent = gr.getValue('parent');

		if (parent != null) { // for My Todo tab
			record.parentId = gr.getValue('parent');
			record.parentTable = gr.parent.sys_class_name + "";
		} else if (gr.getTableName() === x_nesa_ng_obsidian.DXCObsidianConstants.NML_TABLE_NAMES.MODEL_TABLE) {
			record.parentId = gr.getValue('obsidian_new_model_launch');
		}


		// Defining icons & look and feel based on the widget instance id
		if ((options.id && (options.id === "my_approvals" || options.id === "closed_approvals")) || data.table === "sysapproval_approver") {
			var temp = record["document_id.sys_class_name"];
			temp.css_class = "hidden-xs";
			record["document_id.sys_class_name"] = temp;
			if (record.state.value === "approved") // approved
				record.state.icon = "fa fa-check-circle-o fa_my_items text-success";
			else if (record.state.value === "requested") //requested
				record.state.icon = "fa fa-clock-o fa_my_items text-warning";
			else if (record.state.value === "rejected") // rejected
				record.state.icon = "fa fa-times-circle-o fa_my_items text-danger";
			var short_desc_temp = record["document_id.short_description"];
			record["document_id.short_description"] = short_desc_temp;

			//No sysapproval
			if (record["document_id.number"].value === null || record["document_id.number"].value === "") {
				gs.info("DEBUG DXC Table: Entered");
				var approvalGR = new GlideRecord(record.source_table.value);
				approvalGR.addQuery("sys_id", record.document_id.value);
				approvalGR.query();
				if (approvalGR.next()) {
					record["document_id.number"].value = approvalGR.number.getDisplayValue();
					record["document_id.number"].display_value = approvalGR.number.getDisplayValue();
					record["document_id.short_description"].value = approvalGR.short_description.getDisplayValue();
					record["document_id.short_description"].display_value = approvalGR.short_description.getDisplayValue();
					record["document_id.sys_class_name"].value = record.source_table.value;
					if (record.source_table.value === "kb_knowledge") {
						record["document_id.sys_class_name"].display_value = gs.getMessage("Knowledge");
					} else if (record.source_table.value === "cmdb_ci_business_app") {
						record["document_id.sys_class_name"].display_value = gs.getMessage("Business Application");
					} else if (record.source_table.value === "cmdb_ci_business_capability") {
						record["document_id.sys_class_name"].display_value = gs.getMessage("Business Capability");
						record["document_id.number"].display_value = approvalGR.name.getDisplayValue();
					} else if (record.source_table.value === "u_cmdb_ci_batchjob") {
						record["document_id.sys_class_name"].display_value = gs.getMessage("BatchJob");
						record["document_id.number"].value = approvalGR.u_number.getDisplayValue();
						record["document_id.number"].display_value = approvalGR.u_number.getDisplayValue();
						record["document_id.short_description"].value = approvalGR.u_short_description_job.getDisplayValue();
						record["document_id.short_description"].display_value = approvalGR.u_short_description_job.getDisplayValue();
					}
				}
			}
		}
		//Invoices & Inquiries table
		else if (options.id && (options.id === "my_invoices" || options.id === "my_closed_invoices" || options.id === "my_inquiries" || options.id === "my_closed_inquiries" || options.id === "my_rejected_invoices")) {
			if (record.state)
				record.state.css_class = "hidden-xs";
			if (record.sys_class_name)
				//hide sys_class_name for invoices and inquiries
				record.sys_class_name.css_class = "hidden";
		}
		// All other widget definitions
		else {
			if (record.state)
				record.state.css_class = "hidden-xs";
			if (record.sys_class_name)
				record.sys_class_name.css_class = "hidden-xs";
		}
		data.totElements.push(record);


	}

	//Adding surveys to Table STSK0013457
	/*data.row_count = gr.getRowCount();
    //Uncoment this line to remove surveys from widget
    data.row_count+=readySurveyCount+=closedSurveyCount;*/
	data.row_count = data.totElements.length;
	data.num_pages = Math.ceil(data.row_count / data.window_size);

	//SCU short script (short invoices with all tasks fields)
	if (options.id && (options.id === "my_items" || options.id === "all_my_items" || options.id === "closed_items" || options.id === "all_closed_items") && data.o === "sys_updated_on")
		sortByDate();
	//SCU the linbe abobe commented as part of CPR is needed to short the surveys
	//comment this line to remove surveys from widget
	for (var j = data.page_index * data.window_size; j < data.page_index * data.window_size + data.window_size; j++) {
		//Uncoment this line to remove surveys from widget
		//for(var j=0; j<data.window_size; j++){
		if (data.totElements[j])
			data.list.push(data.totElements[j]);
	}

	function sortByDate() {
		data.list = [];
		data.totElements = data.totElements.sort(function (a, b) {
			if (data.d === "desc")
				return new GlideDateTime(b.sys_updated_on.value).getNumericValue() - new GlideDateTime(a.sys_updated_on.value).getNumericValue();
			else
				return new GlideDateTime(a.sys_updated_on.value).getNumericValue() - new GlideDateTime(b.sys_updated_on.value).getNumericValue();
		});
	}

	data.enable_filter = (input.enable_filter == true || input.enable_filter === "true" || options.enable_filter == true || options.enable_filter === "true");

	var breadcrumbWidgetParams = {
		table: data.table,
		query: data.filter,
		enable_filter: data.enable_filter
	};
	data.filterBreadcrumbs = $sp.getWidget('widget-filter-breadcrumbs', breadcrumbWidgetParams);

	// copy to data from input or options
	function optCopy(names) {
		names.forEach(function (name) {
			data[name] = input[name] || options[name];
		});
	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin_Hien The_Tran</sys_created_by>
        <sys_created_on>2022-04-07 08:47:24</sys_created_on>
        <sys_id>4155d01c1bf64594fe9e43f1b24bcb2e</sys_id>
        <sys_mod_count>87</sys_mod_count>
        <sys_name>DXC Obsidian Data Table</sys_name>
        <sys_package display_value="NexGen Obsidian Management" source="x_nesa_ng_obsidian">20ae71f61b8dc11006e886efe54bcbc5</sys_package>
        <sys_policy/>
        <sys_scope display_value="NexGen Obsidian Management">20ae71f61b8dc11006e886efe54bcbc5</sys_scope>
        <sys_update_name>sp_widget_4155d01c1bf64594fe9e43f1b24bcb2e</sys_update_name>
        <sys_updated_by>admin_Hien The_Tran</sys_updated_by>
        <sys_updated_on>2022-06-30 10:14:40</sys_updated_on>
        <template><![CDATA[<div class="panel panel-{{options.color}} b">
  <div class="panel-heading form-inline"  ng-hide="options.hide_header" data-toggle="collapse" data-target="#collapse_{{options.id}}" aria-expanded="{{data.show_collapsed_content}}">
    <span class="dropdown m-r-xs">
      <button aria-label="${Table menu}" class="btn dropdown-toggle glyphicon glyphicon-menu-hamburger" style="line-height: 1.4em" id="optionsMenu" data-toggle="dropdown" aria-haspopup="true"></button>
      <ul class="dropdown-menu" aria-labelledby="optionsMenu">
        <li ng-repeat="t in ::exportTypes">
          <a ng-href="/{{data.table}}_list.do?{{::t.value}}&sysparm_query={{data.filter}}&sysparm_view={{data.view}}&sysparm_fields={{data.fields}}" target="_new">${Export as} {{::t.label}}</a>
        </li>
      </ul>
    </span>
    <span class="panel-title"><i ng-if="options.glyph" class="fa fa-{{options.glyph}} m-r"></i></span>
    <button name="new" role="link" class="btn btn-primary btn-sm m-l-xs" ng-click="newRecord()" ng-if="options.show_new && data.canCreate && !data.newButtonUnsupported" aria-label="${Create new record}">${New}</button>
    <div class="pull-right" ng-if="options.show_keywords">
      <form ng-submit="setSearch(true)">
      <div class="input-group">
        <input type="text" name="datatable-search" ng-model="data.keywords" ng-model-options="{debounce:250}" class="form-control" placeholder="${Keyword Search}">
        <span class="input-group-btn">
          <button name="search" class="btn btn-default" type="submit" aria-label="${Search}"><span class="glyphicon glyphicon-search"></span></button>
        </span>
      </div>
      </form>
    </div>
    
    <div class=pull-right>
      <button name="new" role="link" class="btn btn-primary btn-sm m-l-xs" ng-click="goTo(data.allItemspage,'','')" ng-if="options.limit" aria-label="${View all Items}">${View All Items}</button>
      <a ng-class="{collapsed: !data.show_collapsed_content}" class="collapse_img" data-toggle="collapse" data-target="#collapse_{{options.id}}" 
           aria-expanded="{{data.show_collapsed_content}}"></a>
    </div>
    <!--div class=pull-right ng-if="data.show_collapsed_content">
        <a class="collapse_img" data-toggle="collapse" data-target="#collapse_{{options.id}}"  aria-expanded="true"></a>
      	<a ng-class="data.show_collapsed_content :collapsed" class="collapse_img" aria-expanded="{{data.show_collapsed_content}}"></a>
    </div>
    <div class=pull-right ng-if="!data.show_collapsed_content" >
        <a class="collapse_img collapsed" data-toggle="collapse" data-target="#collapse_{{options.id}}" aria-expanded="false"></a>
    </div-->
    
    <div class="clearfix"></div>
  </div>
  <!-- body -->
  <!-- content not collapsed -->

  
  <div ng-if="data.show_collapsed_content"  ng-class="{in: data.show_collapsed_content}" class="panel-body collapse show" id="collapse_{{options.id}}">
    <h2 class="sr-only data-table-title">{{data.title || data.table_plural}} ${table} - ${page} {{data.p}}</h2>
    <div ng-if="options.show_breadcrumbs && (data.filter || data.enable_filter)" class="filter-breadcrumbs">
              <sp-widget widget="data.filterBreadcrumbs"></sp-widget>
    </div>
    <div class="alert alert-info" ng-if="!data.list.length && !data.num_pages && !data.invalid_table && !loadingData">
      ${No records in {{options.message}} <span ng-if="data.filter">using that filter</span>}
    </div>
    <div class="alert alert-info" ng-if="loadingData">
        <fa name="spinner" spin="true"></fa> ${Loading data}...
     </div>
    <table class="table table-striped table-responsive" ng-if="data.list.length">
      <thead>
        <tr>
          <th class="sr-only"></th>
          <th ng-repeat="field in data.fields_array track by $index"  ng-if="field != 'document_id' && field != 'source_table'" class="text-nowrap {{data.css_class[field]}}" ng-click="setOrderBy(field)" tabindex="0">
            <div class="th-title" aria-label="${Sort by } {{data.column_labels[field]}}">{{data.column_labels[field]}}</div>
            <i class="fa" ng-if="field === data.o" ng-class="{'asc': 'fa-chevron-up', 'desc': 'fa-chevron-down'}[data.d]" aria-label="${Sorted by } {{data.column_labels[field]}} {{data.d == 'asc' ?  '${Ascending}': '${Descending}' }}"></i>
          </th>
           <th ng-if="c.displayCancelSurveys()" class="text-nowrap {{data.css_class[field]}}" tabindex="0">
            <div class="th-title">${Cancel Survey}</div>
           
          </th>
           <th ng-if="data.table === 'task'" class="text-nowrap {{data.css_class[field]}}" tabindex="0">
            <div class="th-title">{{data.msg.requestAgain}}</div>
           
          </th>
      <!--  <th ng-if="data.show_approval_action" class="text-nowrap" tabindex="0">
            <div class="th-title">${Action}</div>
          </th>-->
          <th ng-if="data.show_chat" class="text-nowrap" tabindex="0">
            <div class="th-title">${Live Chat}</div>
          </th>
        </tr>
      </thead>
      <tbody>
        <tr ng-repeat="item in data.list track by item.sys_id">
          <td class="sr-only" tabindex="0" role="link" ng-click="go(data.table, item)" aria-label="${Open record}"></td>
          <td ng-if="field != 'document_id' && field != 'source_table'" role="text" aria-label="{{item[field].display_value}}" class="pointer sp-list-cell {{item[field].css_class}}" ng-class="{selected: item.selected}" ng-click="go(data.table, item)" ng-repeat="field in ::data.fields_array" data-field="{{::field}}" data-th="{{::data.column_labels[field]}}"><i class="{{item[field].icon}}"></i>{{::item[field].display_value}}</td>
        <!--  <td ng-if="data.show_approval_action">
              <button class="btn btn-success action-button action-approve" ng-click="c.uiAction('approve', item.sys_id)" id="appr_approve_action">
                ${Approve}
              </button>
              <button class="btn btn-danger action-button action-reject" ng-click="c.uiAction('reject', item.sys_id)" id="appr_reject_action">
                ${Reject}
              </button>
          </td>-->
           <td ng-if="c.displayCancelSurveys()" ng-click='c.cancelSurvey(item.sys_id)'>
             <img src="trash-icon.png" width="25" height="20"/>
          </td>
          <td ng-if="data.table === 'task'">
             <i ng-if="c.checkDisplayOrderIcon(item.sys_class_name.value, item.catalog_link)" ng-click='c.orderNow(item.catalog_link)'
                class="fa fa-shopping-cart" aria-hidden="true"></i>
          </td>
          <td ng-if="data.show_chat" >
              <!--sp-widget widget="data.chatWidget"></sp-widget-->
            <div ng-if="item.sys_class_name.value != 'asmt_assessment_instance' && ((item.sys_class_name.value=='incident' || item.sys_class_name.value=='sc_req_item')&& data.ITChatAvailable) || ((item.sys_class_name.value=='sn_hr_core_es_case' ||item.sys_class_name.value=='sn_hr_core_fs_case')&& data.HRChatAvailable)"
                 class="chat-icon" ng-click="c.openChatModal(item)">
              <i class="fal fa-comment-alt-dots" aria-hidden="true"></i>
			</div>
          </td>
        </tr>
      </tbody>
    </table>
    <div ng-class="{'pruned-msg-filter-pad': (!options.show_breadcrumbs || !data.filter) && !data.list.length}" class="pruned-msg" ng-if="rowsWerePruned()">
      <span ng-if="rowsPruned == 1">${{{rowsPruned}} row removed by security constraints}</span>
      <span ng-if="rowsPruned > 1">${{{rowsPruned}} rows removed by security constraints}</span>
    </div>
  </div>

  <!-- content collapsed -->
  <div ng-if="!data.show_collapsed_content" class="panel-body collapse collapsed" id="collapse_{{options.id}}">
    <h2 class="sr-only data-table-title">{{data.title || data.table_plural}} ${table} - ${page} {{data.p}}</h2>
    <div ng-if="options.show_breadcrumbs && (data.filter || data.enable_filter)" class="filter-breadcrumbs">
              <sp-widget widget="data.filterBreadcrumbs"></sp-widget>
    </div>
    <div class="alert alert-info" ng-if="!data.list.length && !data.num_pages && !data.invalid_table && !loadingData">
      ${No records in {{data.table_label}} <span ng-if="data.filter">using that filter</span>}
    </div>
    <div class="alert alert-info" ng-if="loadingData">
        <fa name="spinner" spin="true"></fa> ${Loading data}...
     </div>
    <table class="table table-striped table-responsive" ng-if="data.list.length">
      <thead>
        <tr>
          <th class="sr-only"></th>
          <th ng-repeat="field in data.fields_array track by $index" ng-if="field != 'document_id' && field != 'source_table'" class="text-nowrap {{data.css_class[field]}}" ng-click="setOrderBy(field)" tabindex="0">
            <div class="th-title" aria-label="${Sort by } {{data.column_labels[field]}}">{{data.column_labels[field]}}</div>
            <i class="fa" ng-if="field === data.o" ng-class="{'asc': 'fa-chevron-up', 'desc': 'fa-chevron-down'}[data.d]" aria-label="${Sorted by } {{data.column_labels[field]}} {{data.d == 'asc' ?  '${Ascending}': '${Descending}' }}"></i>
          </th>
         <!--<th ng-if="data.show_approval_action" class="text-nowrap" tabindex="0">
            <div class="th-title">${Action}</div>
        </th>-->
          <th ng-if="data.show_chat" class="text-nowrap" tabindex="0">
            <div class="th-title">${Live Chat}</div>
          </th>
        </tr>
      </thead>
      <tbody>
        <tr ng-repeat="item in data.list track by item.sys_id">
          <td class="sr-only" tabindex="0" role="link" ng-click="go(data.table, item)" aria-label="${Open record}"></td>
          <td ng-if="field != 'document_id' && field != 'source_table'" role="text" aria-label="{{item[field].display_value}}" class="pointer sp-list-cell {{item[field].css_class}}" ng-class="{selected: item.selected}" ng-click="go(data.table, item)" ng-repeat="field in ::data.fields_array" data-field="{{::field}}" data-th="{{::data.column_labels[field]}}"><i class="{{item[field].icon}}"></i>{{::item[field].display_value}}</td>
          <!--<td ng-if="data.show_approval_action">
              <button class="btn btn-success action-button action-approve" ng-click="c.uiAction('approve', item.sys_id)" id="appr_approve_action">
                ${Approve}
              </button>
              <button class="btn btn-danger action-button action-reject" ng-click="c.uiAction('reject', item.sys_id)" id="appr_reject_action">
                ${Reject}
              </button>
          </td>-->
          <td ng-if="data.show_chat" > 
              <sp-widget widget="data.chatWidget"></sp-widget>
          </td>
        </tr>
      </tbody>
    </table>
   <div ng-class="{'pruned-msg-filter-pad': (!options.show_breadcrumbs || !data.filter) && !data.list.length}" class="pruned-msg" ng-if="rowsWerePruned()">
      <span ng-if="rowsPruned == 1">${{{rowsPruned}} row removed by security constraints}</span>
      <span ng-if="rowsPruned > 1">${{{rowsPruned}} rows removed by security constraints}</span>
    </div>
  </div>
  <!-- footer -->
  <div class="panel-footer" ng-hide="options.hide_footer" ng-if="data.row_count">
    <div class="btn-toolbar m-r pull-left">
      <div class="btn-group">
        <a ng-disabled="data.p == 1" href="javascript:void(0)" ng-click="setPageNum(data.p - 1)" class="btn btn-default"  aria-label="${Previous page}"><i class="fa fa-chevron-left"></i></a>
      </div>
      <div ng-if="data.num_pages > 1 && data.num_pages < 20" class="btn-group">
        <a ng-repeat="i in getNumber(data.num_pages) track by $index" ng-click="setPageNum($index + 1)" href="javascript:void(0)" ng-class="{active: ($index + 1) == data.p}" type="button" class="btn btn-default" aria-label="${Page} {{$index + 1}}">{{$index + 1}}</a>
      </div>
      <div class="btn-group">
        <a ng-disabled="data.p == data.num_pages" href="javascript:void(0)" ng-click="setPageNum(data.p + 1)" class="btn btn-default" aria-label="${Next page}"><i class="fa fa-chevron-right"></i></a>
      </div>
    </div>
    <div class="m-t-xs panel-title">${Rows {{data.window_start + 1}} - {{ mathMin(data.window_end,data.row_count) }} of {{data.row_count}}}</div>

    <span class="clearfix"></span>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
