<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_nesa_ng_obsidian_sku_assignment</collection>
        <condition/>
        <description>business rule to reprocess applicable countries on document related to the model of the SKU assignment</description>
        <execute_function>false</execute_function>
        <filter_condition table="x_nesa_ng_obsidian_sku_assignment">sku_stageCHANGESTO600^ORsku_stageCHANGESFROM600^EQ<item display_value="Active" endquery="false" field="sku_stage" goto="false" newquery="false" operator="CHANGESTO" or="false" value="600"/>
            <item display_value="Active" endquery="false" field="sku_stage" goto="false" newquery="false" operator="CHANGESFROM" or="true" value="600"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>(DXC) Process doc. applicable countries</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    try {

        if ((obsidianModelSysID = current.getValue("obsidian_model"))) {

            var helper = new x_nesa_ng_obsidian.DXCObsidianDocumentUtils();

            var relatedDocument_GR = new GlideRecord('x_nesa_ng_obsidian_document');
            relatedDocument_GR.addEncodedQuery("related_modelsLIKE" + obsidianModelSysID);
            relatedDocument_GR.query();

            while (relatedDocument_GR.next()) {
                helper.setDocumentApplicableCountries(relatedDocument_GR);
            }

        }

    } catch (exception) {
        var dxcLogger = new global.DXCGSLog("com.dxc.global.debugging_level", "(DXC) Process doc. applicable countries");
        dxcLogger.logError(exception);
    }
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin_Luu-Ly_Mai</sys_created_by>
        <sys_created_on>2022-08-03 08:44:08</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>46fe37821bcd5d5406e886efe54bcb6d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>(DXC) Process doc. applicable countries</sys_name>
        <sys_overrides/>
        <sys_package display_value="NexGen Obsidian Management" source="x_nesa_ng_obsidian">20ae71f61b8dc11006e886efe54bcbc5</sys_package>
        <sys_policy/>
        <sys_scope display_value="NexGen Obsidian Management">20ae71f61b8dc11006e886efe54bcbc5</sys_scope>
        <sys_update_name>sys_script_46fe37821bcd5d5406e886efe54bcb6d</sys_update_name>
        <sys_updated_by>admin_Luu-Ly_Mai</sys_updated_by>
        <sys_updated_on>2022-08-03 08:44:08</sys_updated_on>
        <template/>
        <when>async_always</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=46fe37821bcd5d5406e886efe54bcb6d"/>
</record_update>
