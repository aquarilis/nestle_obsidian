<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_nesa_ng_obsidian_obsidian_model_configuration</collection>
        <condition/>
        <description>(DXC) business rule to ensure that there cannot be 2 model configurations sharing the same name within a given model</description>
        <execute_function>false</execute_function>
        <filter_condition table="x_nesa_ng_obsidian_obsidian_model_configuration">nameVALCHANGES^EQ<item endquery="false" field="name" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>(DXC) Prevent duplicate model config.</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
   try {
     var otherModelConfiguration_GR = new GlideRecord(x_nesa_ng_obsidian.DXCObsidianConstants.NML_TABLE_NAMES.MODEL_CONFIGURATION_TABLE);
     otherModelConfiguration_GR.addQuery("obsidian_model", current.obsidian_model);
     otherModelConfiguration_GR.addQuery("name", current.name);
     otherModelConfiguration_GR.addQuery("sys_id", "!=", current.sys_id);
     otherModelConfiguration_GR.query();

     if (otherModelConfiguration_GR.hasNext()){
        current.setAbortAction(true);
        gs.addErrorMessage(gs.getMessage("There is already another Model Configuration named '") + current.name + "'");
     }
   } catch(exception) {
      var dxcLogger = new global.DXCGSLog("com.dxc.global.debugging_level", "(DXC) Prevent duplicate model config.");
      dxcLogger.logError(exception);
   }
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin_Luu-Ly_Mai</sys_created_by>
        <sys_created_on>2022-04-03 18:53:31</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>2f69f9c71ba689d0fe9e43f1b24bcbf7</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>(DXC) Prevent duplicate model config.</sys_name>
        <sys_overrides/>
        <sys_package display_value="NexGen Obsidian Management" source="x_nesa_ng_obsidian">20ae71f61b8dc11006e886efe54bcbc5</sys_package>
        <sys_policy/>
        <sys_scope display_value="NexGen Obsidian Management">20ae71f61b8dc11006e886efe54bcbc5</sys_scope>
        <sys_update_name>sys_script_2f69f9c71ba689d0fe9e43f1b24bcbf7</sys_update_name>
        <sys_updated_by>admin_luu-ly_mai</sys_updated_by>
        <sys_updated_on>2022-05-03 09:54:50</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=2f69f9c71ba689d0fe9e43f1b24bcbf7"/>
</record_update>
