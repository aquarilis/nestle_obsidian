<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_transform_script">
    <sys_transform_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <map display_value="(DXC) Obsidian - 09 - SKU Assignment features TM">f119d0b31beb015c06e886efe54bcbc6</map>
        <order>100</order>
        <script><![CDATA[(function runTransformScript(source, map, log, target /*undefined onStart*/) {
	try {
		var sku_assignment_import_unique_key = source.getValue("u_sku_assignment_unique_code");
		if (sku_assignment_import_unique_key == null) {
			throw "source doesn't have a sku_assignment_unique_code value";
		}

		var skuAssignmentGR = new GlideRecord("x_nesa_ng_obsidian_sku_assignment");
		if (!skuAssignmentGR.get("import_unique_key", sku_assignment_import_unique_key)) {
			throw "couldn't find skuAssignmentGR with import_unique_key " + sku_assignment_import_unique_key;
		}



		var modelFeatureOptionFullName = source.getValue("u_feature_option");
		if (modelFeatureOptionFullName == null) {
			throw "source doesn't have a feature option value";
		}


		var modelFeatureOptionFullNameArray = modelFeatureOptionFullName.split("---");

		if (modelFeatureOptionFullNameArray.length != 3) {
			throw "modelFeatureFullNameArray.length_is_not_3 in " + modelFeatureOptionFullName;
		}

		var modelName = modelFeatureOptionFullNameArray[0].toString();

		var modelGR = new GlideRecord("x_nesa_ng_obsidian_obsidian_model");
		if (!modelGR.get("name", modelName)) {
			throw "couldn't find Obsidian model with name " + modelName + " for modelFeatureOptionFullName " + modelFeatureOptionFullName;
		}


		var featureName = modelFeatureOptionFullNameArray[1].toString();


		var modelFeature_GR = new GlideRecord(x_nesa_ng_obsidian.DXCObsidianConstants.NML_TABLE_NAMES.MODEL_FEATURE_TABLE);
		modelFeature_GR.addQuery("obsidian_model.name", modelName);
		modelFeature_GR.addQuery("name", featureName);
		modelFeature_GR.query();
		if (modelFeature_GR.getRowCount() != 1) {
			throw "modelFeature_GR query with " + modelFeature_GR.getEncodedQuery() + " returned this amount of results: " + modelFeature_GR.getRowCount();
		}
		modelFeature_GR.next();
		if (modelFeature_GR.getValue("obsidian_model") != skuAssignmentGR.getValue("obsidian_model")) {
			throw "feature option '" + modelFeatureOptionFullName + "' doesn't belong to the same model as SKU assignment '" + skuAssignmentGR.getValue("import_unique_key") + "'";
		}


	} catch (e) {
		log.error("preventive error: " + e);
		ignore = true;
	}

})(source, map, log, target);]]></script>
        <sys_class_name>sys_transform_script</sys_class_name>
        <sys_created_by>admin_Luu-Ly_Mai</sys_created_by>
        <sys_created_on>2022-06-15 14:00:31</sys_created_on>
        <sys_id>aea27cee1b88511842f50ed1604bcb6a</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>onBefore</sys_name>
        <sys_package display_value="NexGen Obsidian Management" source="x_nesa_ng_obsidian">20ae71f61b8dc11006e886efe54bcbc5</sys_package>
        <sys_policy/>
        <sys_scope display_value="NexGen Obsidian Management">20ae71f61b8dc11006e886efe54bcbc5</sys_scope>
        <sys_update_name>sys_transform_script_aea27cee1b88511842f50ed1604bcb6a</sys_update_name>
        <sys_updated_by>admin_luu-ly_mai</sys_updated_by>
        <sys_updated_on>2022-06-15 14:10:06</sys_updated_on>
        <when>onBefore</when>
    </sys_transform_script>
</record_update>
