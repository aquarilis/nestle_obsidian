<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_nesa_ng_obsidian_obsidian_new_model_launch</collection>
        <condition/>
        <description>(DXC) synchronize certain field values between Obsidian New Model Launch and Obsidian Model records according to the x_nesa_ng_obsidian.nml.synchro_field_map system property</description>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>(DXC) Sync changes to Obsidian Model</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
   try {
     var syncFieldMap = JSON.parse(gs.getProperty("x_nesa_ng_obsidian.nml.synchro_field_map"));

     var obsidianModel_GR = current.obsidian_model.getRefRecord();
     if (!obsidianModel_GR.isValidRecord()){
        throw("couldn't get related Obsidian Model glideRecord");
     }

     var obsidianModelUpdateRequired = false;
     for (sourceFieldName in syncFieldMap){
        if (current[sourceFieldName].changes()){
         obsidianModelUpdateRequired = true;
         var targetValue = ( current.getValue(sourceFieldName) !== null ? current.getValue(sourceFieldName): "");
         obsidianModel_GR.setValue(syncFieldMap[sourceFieldName], targetValue);
        }
     }

     if (obsidianModelUpdateRequired){
        obsidianModel_GR.update();
     }



   } catch(exception) {
      gs.addErrorMessage("error in '(DXC) Sync changes to Obsidian Model' business rule: " + exception);
      var dxcLogger = new global.DXCGSLog("com.dxc.global.debugging_level", "(DXC) Sync changes to Obsidian Model");
      dxcLogger.logError(exception);
   }
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin_Luu-Ly_Mai</sys_created_by>
        <sys_created_on>2022-03-31 09:42:53</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>c96ed08e1baa8950fe9e43f1b24bcbf2</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>(DXC) Sync changes to Obsidian Model</sys_name>
        <sys_overrides/>
        <sys_package display_value="NexGen Obsidian Management" source="x_nesa_ng_obsidian">20ae71f61b8dc11006e886efe54bcbc5</sys_package>
        <sys_policy/>
        <sys_scope display_value="NexGen Obsidian Management">20ae71f61b8dc11006e886efe54bcbc5</sys_scope>
        <sys_update_name>sys_script_c96ed08e1baa8950fe9e43f1b24bcbf2</sys_update_name>
        <sys_updated_by>admin_luu-ly_mai</sys_updated_by>
        <sys_updated_on>2022-03-31 09:55:25</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=c96ed08e1baa8950fe9e43f1b24bcbf2"/>
</record_update>
