<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $location, spUtil) {
    /* widget controller */
    var c = this;

    // set default filter for the first tab
    c.filter_option = c.options.tabs[0].filter_by_options[0][1];


    // display the number of items on the tab without needing to select it when loading the page
    var arr = [];
    for (var i in c.options.tabs) {
        arr.push({
            table: c.options.tabs[i].table,
            filter: c.options.tabs[i].filter,
        })
    }

    var ga = new GlideAjax('x_nesa_ng_obsidian.DXCObsidianPortalUtils');
    ga.addParam('sysparm_name', 'countMultiple');
    ga.addParam('list_filter', JSON.stringify(arr));
    ga.getXML(getAnswer);

    function getAnswer(response) {
        var answer = response.responseXML.documentElement.getAttribute("answer");
        var countList = JSON.parse(answer);
        c.options.header_count = countList;
    }

    function update_record_count(table, query, index) {
        var ga = new GlideAjax('x_nesa_ng_obsidian.DXCObsidianPortalUtils');
        ga.addParam('sysparm_name', 'count');
        ga.addParam('table_name', table);
        ga.addParam('query_statement', query);
        ga.getXML(parseResult);

        function parseResult(response) {
            var answer = response.responseXML.documentElement.getAttribute("answer");
            c.options.header_count[index] = answer;
            c.load_queue[index] = false;
        }
    }
    update_record_count(c.options.tabs[0].table, c.options.tabs[0].filter, 0);
    c.load_queue = [];
    for (var i = 0; i < c.options.tabs.length; i++) {
        c.load_queue.push(false);
    }
    c.tab_changed = function(index) {

        c.filter_option = c.options.tabs[index].filter_by_options[0][1];
        c.sort_field = "";
        c.data.sort_options = c.options.tabs[index].sort_options;
        c.data.filter_options = c.options.tabs[index].filter_by_options;

        c.options.selected_tab = index;
        var tab_obj = c.options.tabs[index];
        var params = $scope.data.widgetParams;
        params.title = tab_obj.title;
        params.table = tab_obj.table;
        params.fields = tab_obj.fields;
        params.filter = tab_obj.filter;
        params.filter_by_options = tab_obj.filter_by_options;
        params.o = 'sys_updated_on';
        params.d = c.sort_field;
        params.collapsed = "false";
        params.id = tab_obj.id;
        params.header_display = tab_obj.title;
        update_record_count(tab_obj.table, c.filter_option, index);

        spUtil.get(c.data.tableWidget, params).then(function(response) {
            $scope.data.dataTableWidget = response;
        });
    }

    $scope.$watch('c.sort_field', function() {
        if (c.sort_field) {
            var index = c.options.selected_tab;
            c.data.sort_options = c.options.tabs[index].sort_options;
            c.data.filter_options = c.options.tabs[index].filter_by_options;

            c.options.selected_tab = index;
            var tab_obj = c.options.tabs[index];
            var params = $scope.data.widgetParams;
            params.title = tab_obj.title;
            params.table = tab_obj.table;
            params.fields = tab_obj.fields;
            if (c.filter_option)
                params.filter = c.filter_option
            else
                params.filter = tab_obj.filter;

            params.o = "sys_updated_on";
            params.d = c.sort_field;
            params.collapsed = "false";
            params.id = c.options.tabs[index].id;



            spUtil.get(c.data.tableWidget, params).then(function(response) {
                $scope.data.dataTableWidget = response;
            });
        }

    });

    $scope.$watch('c.filter_option', function() {
        if (c.filter_option != "" && c.filter_option != undefined) {
            var index = c.options.selected_tab;
            c.data.sort_options = c.options.tabs[index].sort_options;
            c.data.filter_options = c.options.tabs[index].filter_by_options;
            c.options.selected_tab = index;
            var tab_obj = c.options.tabs[index];
            var params = $scope.data.widgetParams;
            params.title = tab_obj.title;
            params.table = tab_obj.table;
            params.fields = tab_obj.fields;
            params.filter = c.filter_option;
            params.filter_by_options = tab_obj.filter_by_options;
            params.o = "sys_updated_on";
            params.d = c.sort_field;
            params.collapsed = "false";
            params.id = c.options.tabs[index].id;
            c.load_queue[index] = true;
            update_record_count(tab_obj.table, c.filter_option, index);

            spUtil.get(c.data.tableWidget, params).then(function(response) {
                $scope.data.dataTableWidget = response;
            });
        }
    });

    $scope.$on('$sp.updateHeaderCount', function() {
        var currentCount = parseInt(c.options.header_count[c.options.selected_tab]);
        c.options.header_count[c.options.selected_tab] = currentCount - 1;
    });

}]]></client_script>
        <controller_as>c</controller_as>
        <css>.filter-select {&#13;
            height: 35px;&#13;
            background-color: black;&#13;
            color: white;&#13;
            border-radius: 3px;&#13;
            margin: 15px;&#13;
  			&#13;
  			text-align-last: center;&#13;
        }&#13;
&#13;
        .header {&#13;
            height: 35px;&#13;
        }&#13;
&#13;
        .header_tab {&#13;
            float: left;&#13;
            min-width: 180px;&#13;
            background-color: #000 ;&#13;
            height: 35px;&#13;
            &#13;
            text-align: center;&#13;
          	padding: 8px 5px 0 5px;&#13;
          color: white;&#13;
          	&#13;
        }&#13;
&#13;
		.header_tab_selected {&#13;
            float: left;&#13;
            min-width: 180px;&#13;
            background-color: #c1c1c1;&#13;
            height: 35px;&#13;
            &#13;
            text-align: center;&#13;
          	padding: 8px 5px 0 5px;&#13;
           color: #838383;&#13;
			&#13;
		}&#13;
		&#13;
&#13;
        .header_title {&#13;
            width: 100%;&#13;
           &#13;
            text-align: center;&#13;
          	font-weight: bold;&#13;
        }&#13;
&#13;
        .table-content-inner {&#13;
            background-color: teal;&#13;
        }&#13;
&#13;
        table {&#13;
            font-family: arial, sans-serif;&#13;
            border-collapse: collapse;&#13;
            width: 100%;&#13;
        }&#13;
&#13;
        td,&#13;
        th {&#13;
            border: 1px solid #dddddd;&#13;
            text-align: left;&#13;
            padding: 8px;&#13;
        }&#13;
&#13;
        tr:nth-child(even) {&#13;
            background-color: #dddddd;&#13;
        }&#13;
        .table-component{&#13;
            border: 1px solid #262626;&#13;
            border-radius: 0px 5px 5px 5px;&#13;
        }&#13;
.panel{&#13;
margin-bottom: 0px !important;&#13;
  border-radius: 0px 0px 5px 5px !important;&#13;
}&#13;
&#13;
.panel-body {&#13;
    padding: 0px 1px !important;&#13;
}&#13;
&#13;
thead{&#13;
background: #838383;&#13;
}&#13;
.th-title{&#13;
color: #141414 !important;&#13;
}&#13;
&#13;
.list-container {&#13;
  margin: 15px 0;&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>dxc-obsidian-my-tickets</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) { 

 }]]></link>
        <name>(DXC) Obsidian My tickets</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function () {
	var lmaLogger = new global.GSLog("com.dxc.global.debugging_enabled", "LMADebug");
	try {

		var obsidianCommonUtils = new x_nesa_ng_obsidian.DXCObsidianCommonUtils();
		var userID = gs.getUserID();

		var userIsMarketRelated = obsidianCommonUtils.isUserMarketRelated(userID);
		var userIsCentralTeamRelated = obsidianCommonUtils.isUserSBUCentralTeamRelated(userID);
		var userIsSupplierRelated = obsidianCommonUtils.isUserSupplierRelated(userID);
		var userIs3rdPartyRelated = obsidianCommonUtils.isUser3rdPartyRelated(userID);

		var adminOverride = true;

		//add "Obsidian Models" tab only if user is not 3rd party related
		if (!userIs3rdPartyRelated) {
			var obsidianModelTab_obj = {
				"title": "Obsidian Models",
				"id": "my_obsidian_models",
				"table": x_nesa_ng_obsidian.DXCObsidianConstants.NML_TABLE_NAMES.MODEL_TABLE,
				"fields": "name,obsidian_project,supplier,model_category,system_brand",
				"filter": "",
				"sort_options": [
					[
						"Sort by",
						""
					],
					[
						"Newest",
						"desc"
					],
					[
						"Oldest",
						"asc"
					]
				],
				"filter_by_options": [
					[
						"All",
						"sys_id!=null"
					],
					[
						"Active",
						"nml_stage=600"
					],
					[
						"Within New Model Launch",
						"nml_stageIN100,200,300,400,500"
					],
					[
						"Inactive",
						"nml_stageIN700,800"
					]
				]
			};

			//remove supplier column if user is supplier
			if (userIsSupplierRelated && obsidianModelTab_obj.fields.indexOf("supplier") != -1) {
				obsidianModelTab_obj.fields = (function (fieldNameToRemove, fieldList) {
					var fieldListArray = fieldList.split(",");
					fieldListArray.splice(fieldListArray.indexOf(fieldNameToRemove), 1);
					return fieldListArray.join(",");
				})("supplier", obsidianModelTab_obj.fields);
			}

			options.tabs.push(obsidianModelTab_obj);
		}


		if (userIsMarketRelated || userIsSupplierRelated) {
			var obsidianSparePartTab_obj = {
				"title": "Obsidian Spare parts",
				"id": "my_spare_parts",
				"table": "x_nesa_ng_obsidian_obsidian_spare_part",
				"fields": "name,supplier,supplier_sku_code,supplier_sku_description,sap_material_number",
				"filter": "",
				"sort_options": [
					[
						"Sort by",
						""
					],
					[
						"Newest",
						"desc"
					],
					[
						"Oldest",
						"asc"
					]
				],
				"filter_by_options": [
					[
						"All",
						"sys_id!=null"
					],
					[
						"Active",
						"status=In Production"
					],
					[
						"Inactive",
						"status=Retired"
					]
				]
			};




			//remove supplier column if user is supplier
			if (userIsSupplierRelated && !gs.hasRole("admin")) {
				var userSuppliers = obsidianCommonUtils.getSuppliersForUser(userID);

				obsidianSparePartTab_obj.filter_by_options = [
					[
						"All",
						"supplier=" + userSuppliers.join("^ORsupplier="),
					],
					[
						"Active",
						"status=In Production^supplier=" + userSuppliers.join("^ORsupplier="),
					],
					[
						"Inactive",
						"status=Retired^supplier=" + userSuppliers.join("^ORsupplier="),
					],
				];

				// lmaLogger.logDebug(obsidianSparePartTab_obj.filter_by_options);


				if (obsidianSparePartTab_obj.fields.indexOf("supplier") != -1) {
					obsidianSparePartTab_obj.fields = (function (fieldNameToRemove, fieldList) {
						var fieldListArray = fieldList.split(",");
						fieldListArray.splice(fieldListArray.indexOf(fieldNameToRemove), 1);
						return fieldListArray.join(",");
					})("supplier", obsidianSparePartTab_obj.fields);
				}
			}

			options.tabs.push(obsidianSparePartTab_obj);
		}

		//add "SKU Assignment" tab if User is Market related
		if (
			userIsMarketRelated ||
			userIsCentralTeamRelated ||
			userIsSupplierRelated ||
			(adminOverride && gs.hasRole("admin"))
		) {
			var skuTab_obj = {
				"title": "SKU Assignments",
				"id": "x_nesa_ng_obsidian_sku_assignment",
				"table": "x_nesa_ng_obsidian_sku_assignment",
				"fields": "number,obsidian_model,supplier,assignment_country,sku_vendor,sku_stage,sys_created_on",
				"filter": "",
				"sort_options": [
					["Sort by", ""],
					["Newest", "desc"], "Oldest", "asc"
				],
				"filter_by_options": [
					["All", ""]
				]
			};

			if (adminOverride && gs.hasRole("admin")) {
				skuTab_obj.filter = "";
				// skuTab_obj.filter_by_options = [
				// 	["All", ""],
				// 	["Open", "active=true"],
				// 	["Closed", "active=false"]
				// ];
			}

			if (userIsSupplierRelated && skuTab_obj.fields.indexOf("supplier") != -1) {
				skuTab_obj.fields = (function (fieldNameToRemove, fieldList) {
					var fieldListArray = fieldList.split(",");
					fieldListArray.splice(fieldListArray.indexOf(fieldNameToRemove), 1);
					return fieldListArray.join(",");
				})("supplier", skuTab_obj.fields);
			}

			options.tabs.push(skuTab_obj);
		}

		//add "To do's" tab
		var toDoTab_obj = {
			"title": "To do's",
			"id": "my_todo",
			"table": "sn_uni_task_universal_task",
			"fields": "number,short_description,state,assigned_to,parent,parent.sys_class_name",
			"filter": "parent.sys_class_nameSTARTSWITHx_nesa_ng_obsidian^state=2^assignment_groupDYNAMIC9b17a8401b768954fe9e43f1b24bcb67^assigned_toISEMPTY^NQparent.sys_class_nameSTARTSWITHx_nesa_ng_obsidian^state=2^assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe",
			"sort_options": [
				[
					"Sort by",
					""
				],
				[
					"Newest",
					"desc"
				],
				[
					"Oldest",
					"asc"
				]
			],
			"filter_by_options": [
				[
					"All",
					"parent.sys_class_nameSTARTSWITHx_nesa_ng_obsidian^state=2^assignment_groupDYNAMIC9b17a8401b768954fe9e43f1b24bcb67^assigned_toISEMPTY^NQparent.sys_class_nameSTARTSWITHx_nesa_ng_obsidian^state=2^assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe"
				],
				[
					"Assigned to me",
					"parent.sys_class_nameSTARTSWITHx_nesa_ng_obsidian^state=2^assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe"
				],
				[
					"Assigned to my group(s)",
					"parent.sys_class_nameSTARTSWITHx_nesa_ng_obsidian^state=2^assignment_groupDYNAMIC9b17a8401b768954fe9e43f1b24bcb67^assigned_toISEMPTY"
				]
			]
		};

		if (adminOverride && gs.hasRole("admin")) {
			toDoTab_obj.filter = "parent.sys_class_nameSTARTSWITHx_nesa_ng_obsidian";
			toDoTab_obj.filter_by_options = [
				["All", "parent.sys_class_nameSTARTSWITHx_nesa_ng_obsidian"],
				["Open", "parent.sys_class_nameSTARTSWITHx_nesa_ng_obsidian^active=true"],
				["Closed", "parent.sys_class_nameSTARTSWITHx_nesa_ng_obsidian^active=false"]
			];
		}
		options.tabs.push(toDoTab_obj);



		//add "Technical Ticket" tab if User is Market related
		if (
			userIsMarketRelated ||
			userIs3rdPartyRelated ||
			userIsSupplierRelated ||
			(adminOverride && gs.hasRole("admin"))
		) {
			var ttTab_obj = {
				"title": "Technical Tickets",
				"id": "x_nesa_ng_obsidian_technical_ticket",
				"table": "x_nesa_ng_obsidian_technical_ticket",
				"fields": "number,title,category,state,tsm.state,sys_created_on",
				"filter": "opened_byDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORu_countryDYNAMIC81fd323e1b46cd90fe9e43f1b24bcbad^EQ",
				"sort_options": [
					["Sort by", ""],
					["Newest", "desc"], "Oldest", "asc"
				],
				"filter_by_options": [
					["All", "opened_byDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORu_countryDYNAMIC81fd323e1b46cd90fe9e43f1b24bcbad^EQ"],
					["Open", "active=true^opened_byDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORu_countryDYNAMIC81fd323e1b46cd90fe9e43f1b24bcbad^EQ"],
					["Closed", "active=false^opened_byDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ORu_countryDYNAMIC81fd323e1b46cd90fe9e43f1b24bcbad^EQ"]
				]
			};

			if (adminOverride && gs.hasRole("admin")) {
				ttTab_obj.filter = "";
				ttTab_obj.filter_by_options = [
					["All", ""],
					["Open", "active=true"],
					["Closed", "active=false"]
				];
			}

			if (userIsSupplierRelated) {
				ttTab_obj.filter = "supplierDYNAMIC535f98831bc6c1d0fe9e43f1b24bcb67^EQ";
				ttTab_obj.filter_by_options = [
					["All", "supplierDYNAMIC535f98831bc6c1d0fe9e43f1b24bcb67^EQ"],
					["Open", "active=true^supplierDYNAMIC535f98831bc6c1d0fe9e43f1b24bcb67^EQ"],
					["Closed", "active=false^supplierDYNAMIC535f98831bc6c1d0fe9e43f1b24bcb67^EQ"]
				];
			}

			options.tabs.push(ttTab_obj);
		}

		//add "Technical Solution Management" tab if User is Supplier related
		if (
			userIsSupplierRelated ||
			(adminOverride && gs.hasRole("admin"))
		) {
			var tsmTabs_obj = {
				"title": "Technical Solution Management",
				"id": "x_nesa_ng_obsidian_technical_solution_management",
				"table": "x_nesa_ng_obsidian_technical_solution_management",
				"fields": "number,first_reported_model,state,issue_name,sys_updated_on",
				"filter": "supplierDYNAMIC535f98831bc6c1d0fe9e43f1b24bcb67^EQ",
				"sort_options": [
					["Sort by", ""],
					["Newest", "desc"], "Oldest", "asc"
				],
				"filter_by_options": [
					["All", "supplierDYNAMIC535f98831bc6c1d0fe9e43f1b24bcb67^EQ"],
					["Open", "active=true^supplierDYNAMIC535f98831bc6c1d0fe9e43f1b24bcb67^EQ"],
					["Closed", "active=false^supplierDYNAMIC535f98831bc6c1d0fe9e43f1b24bcb67^EQ"]
				]
			};

			if (adminOverride && gs.hasRole("admin")) {
				tsmTabs_obj.filter = "";
				tsmTabs_obj.filter_by_options = [
					["All", ""],
					["Open", "active=true"],
					["Closed", "active=false"]
				];
			}

			options.tabs.push(tsmTabs_obj);
		}

		//add "Approval requests" tab
		var approvalTab_obj = {
			"title": "Approval requests",
			"id": "my_approvals",
			"table": "sysapproval_approver",
			"filter": "approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe^state=requested^source_tableSTARTSWITHx_nesa_ng_obsidian",
			"fields": "document_id.short_description,document_id.sys_class_name,document_id.number,sys_updated_on,state,document_id,source_table",
			"sort_options": [
				[
					"Sort by",
					""
				],
				[
					"Newest",
					"desc"
				],
				[
					"Oldest",
					"asc"
				]
			],
			"filter_by_options": [
				[
					"All",
					"approverDYNAMIC90d1921e5f510100a9ad2572f2b477fe^state=requested^source_tableSTARTSWITHx_nesa_ng_obsidian"
				]
			]
		};

		var approvalRequest_GR = new GlideRecord("sysapproval_approver");
		approvalRequest_GR.addEncodedQuery("approver=" + userID + "^state=requested^source_tableSTARTSWITHx_nesa_ng_obsidian");
		approvalRequest_GR.setLimit(1);
		approvalRequest_GR.query();
		if (approvalRequest_GR.hasNext() || gs.hasRole("admin")) {
			options.tabs.push(approvalTab_obj);
		}

		//lmaLogger.logDebug(gs.getUserName() + " --> " + JSON.stringify(options));


		for (var i = 0; i < options.tabs.length; i++) {
			options.tabs[i].title = gs.getMessage(options.tabs[i].title);
			for (var j = 0; j < options.tabs[i].filter_by_options.length; j++) {
				options.tabs[i].filter_by_options[j][0] = gs.getMessage(options.tabs[i].filter_by_options[j][0]);
			}
			for (var k = 0; k < options.tabs[i].sort_options.length; k++) {
				options.tabs[i].sort_options[k][0] = gs.getMessage(options.tabs[i].sort_options[k][0]);
			}
		}

		var tab_obj;
		data.tab = $sp.getParameter("tab");
		tab_obj = options.tabs[0];
		data.sort_options = options.tabs[0].sort_options;
		data.filter_options = options.tabs[0].filter_by_options;

		data.widgetParams = {
			title: tab_obj.title,
			table: tab_obj.table,
			fields: tab_obj.fields,
			filter: tab_obj.filter,
			filter_by_options: tab_obj.filter_by_options,
			o: 'sys_created_on',
			d: 'descending',
			"collapsed": "false",
			id: tab_obj.id,
			header_display: "My Tickets"

		};
		data.tableWidget = 'dxc-obsidian-data-table';
		data.dataTableWidget = $sp.getWidget(data.tableWidget, data.widgetParams);
	} catch (e) {
		lmaLogger.logErr("obsidian list widget error: " + e);
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin_Isaac_Perez</sys_created_by>
        <sys_created_on>2022-03-01 09:09:04</sys_created_on>
        <sys_id>90a635581b060910fe9e43f1b24bcb70</sys_id>
        <sys_mod_count>144</sys_mod_count>
        <sys_name>(DXC) Obsidian My tickets</sys_name>
        <sys_package display_value="NexGen Obsidian Management" source="x_nesa_ng_obsidian">20ae71f61b8dc11006e886efe54bcbc5</sys_package>
        <sys_policy/>
        <sys_scope display_value="NexGen Obsidian Management">20ae71f61b8dc11006e886efe54bcbc5</sys_scope>
        <sys_update_name>sp_widget_90a635581b060910fe9e43f1b24bcb70</sys_update_name>
        <sys_updated_by>admin_luu-ly_mai</sys_updated_by>
        <sys_updated_on>2022-06-08 14:40:07</sys_updated_on>
        <template><![CDATA[<div>
  <div class="header">
    <div class="header-tabs" ng-repeat="tab in c.options.tabs track by $index">

      <div ng-click="c.tab_changed($index)" ng-class="{'header_tab': c.options.selected_tab == $index , 'header_tab_selected': c.options.selected_tab != $index}">
        <span class="header_title" >${{{tab.title}}} <span ng-if="!c.load_queue[$index]&&c.options.header_count[$index]!=-1">({{c.options.header_count[$index]}})</span></span>
      </div>

    </div>
  </div>
  <div class="table-component">
    <div class="table-content">
      <div class="filter-options">
        Filter: <select class="filter-select" ng-model="c.filter_option">
          <option  ng-repeat="fo in data.filter_options" value="{{fo[1]}}">${{{fo[0]}}}</option>
        </select>
      </div>
    </div>
    <div>
      <div class="table-content-inner">
        <sp-widget ng-if="data.dataTableWidget" widget="data.dataTableWidget" />
      </div>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
